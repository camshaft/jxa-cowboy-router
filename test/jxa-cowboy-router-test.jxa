(ns jxa-cowboy-router-test
  (require cowboy_req)
  (require random)
  (require proplists)
  (require erlang)
  (use (jxa-cowboy-router :only (get/2
                                 get/3
                                 post/3
                                 put/3
                                 delete/3
                                 all/3
                                 compile/1))))

(get "/" :router-test, [:root <<"thingy">>])
(get "/users" :router-test, [:users])
(post "/users" :router-test, [:user-post])
(get "/users/:id" :router-test, [:users-id])
(put "/users/:id" :router-test, [:users-id-put])
(delete "/users/:id" :router-test, [:users-id-delete])
(all "/handle-all" :router-test, [:handle-all])
(get "/rest/[...]" :router-test, [:rest])
(get "/rest-path/:with/:var/[...]" :router-test, [:rest-path])

;; TODO support optional segments
;; (get "/optional-1/[:value]" :optional-resource)
;; (get "/optional-2/[:first/:second]" :optional-resource)
;; (get "/optional-3/[:first/[:second]]" :optional-resource)

(get "/roulette" (req bindings)
  (case (random/uniform 6)
    (1 {:router-test, [:dead]})
    (_ {:router-test, [:alive]})))

(get "/roulette/:chance" (req bindings)
  (case (random/uniform
         (erlang/binary_to_integer
          (proplists/get_value :chance bindings)))
    (1 {:router-test, [:dead]})
    (_ {:router-test, [:alive]})))

(compile jxa-cowboy-router-test)

(ns router-test
  (require application)
  (require cowboy)
  (require cowboy_req)
  (require io)
  (require io_lib))

(defn+ start ()
  (application/ensure_all_started :cowboy)
  (cowboy/start_http :http
                     100
                     [{:port 8080}]
                     [{:middlewares [:jxa-cowboy-router-test :cowboy_handler]}]))

(defn+ init (_ req args)
  (io/format "~p~n" [args])
  {:ok req args})

(defn+ handle (req state)
  (case (cowboy_req/reply 200 [] (io_lib/format "~p~n" [state]) req)
    ({:ok req2}
     {:ok req2 state})))

(defn+ terminate (reason req state)
  :ok)
